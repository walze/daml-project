module Sheet where

import Weapon

type Target = (Text, Party)
type Key = (Party, Target)
type SheetID = ContractId Sheet

data Stance = Attack | Defence
  deriving (Eq, Show)

base_health = 8

template Sheet with
    name: Text
    hp: Int
    weapon: Weapon
    owner: Party
    master: Party
    stance: Stance
  where
    ensure name /= ""
    signatory master
    observer owner, master
    key (master, (name, owner)) : Key
    maintainer fst key

    let
      totalHP = base_health * weapon.ad
      isAlive = hp > 0

    choice Suffer : SheetID
        with
            damage: Int
        controller master
        do
            assertMsg "Cannot suffer negative damage" $ damage >= 0

            create this with
                hp = case stance of
                    -- completely arbitrary damage addition
                    Attack -> hp - (damage + damage * (20 / weapon.ad))
                    Defence -> hp - damage

