module Sheet where

import Role

type Target = (Text, Party)
type Key = (Party, Target)
type SheetID = ContractId Sheet

data Stance = Attack | Defence
  deriving (Eq, Show)


template Sheet with
    name: Text
    hp: Int
    role: Role
    owner: Party
    master: Party
    stance: Stance
  where
    ensure name /= ""
    signatory master
    observer owner, master
    key (master, (name, owner)) : Key
    maintainer fst key

    let
      totalHP = role.hp
      isAlive = hp > 0

    choice ChangeStance: SheetID
      with
        action: Stance
      controller owner
      do
          create this
            with stance = action

    choice Suffer : SheetID
        with
            damage: Int
        controller master
        do
            assertMsg "Cannot suffer negative damage" $ damage >= 0
            let rdamage = max 0 $ min (damage + (round role.dr)) damage

            create this with
                hp = case stance of
                    -- completely arbitrary damage addition
                    Attack -> hp - damage
                    Defence -> hp - rdamage

